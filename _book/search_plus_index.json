{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction "},"articles/python/alg/":{"url":"articles/python/alg/","title":"算法","keywords":"","body":"算法 "},"articles/python/alg/sort/":{"url":"articles/python/alg/sort/","title":"排序算法","keywords":"","body":"排序 "},"articles/python/alg/sort/bubble.html":{"url":"articles/python/alg/sort/bubble.html","title":"冒泡排序","keywords":"","body":"冒泡排序 def bubbleSort(arr): n = len(arr) # 遍历所有数组元素 for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] "},"articles/python/module/":{"url":"articles/python/module/","title":"模块","keywords":"","body":"模块 "},"articles/python/module/log/":{"url":"articles/python/module/log/","title":"日志","keywords":"","body":"日志 "},"articles/python/module/log/loguru.html":{"url":"articles/python/module/log/loguru.html","title":"loguru","keywords":"","body":"loguru 官方网站：https://loguru.readthedocs.io/en/stable/ 安装 pip install loguru 配置 config.py 使用 from loguru import logger logger.debug(\"This is a debug message!\") logger.info(\"This is a info message!\") logger.warning(\"This is a warning message!\") logger.error(\"This is a error message!\") logger.success(\"This is a success message!\") logger.critical(\"This is a critical message!\") "},"articles/python/module/encrypt/":{"url":"articles/python/module/encrypt/","title":"加密","keywords":"","body":""},"articles/python/module/encrypt/passlib.html":{"url":"articles/python/module/encrypt/passlib.html","title":"passlib","keywords":"","body":"passlib 安装 pip install passlib 加密 from passlib.hash import pbkdf2_sha256 hash = pbkdf2_sha256.hash(\"123456\") 验证 from passlib.hash import pbkdf2_sha256 hash = pbkdf2_sha256.hash(\"123456\") print(pbkdf2_sha256.verify(\"123456\"), hash) # True print(pbkdf2_sha256.verify(\"111222\"), hash) # False "},"articles/python/framework/":{"url":"articles/python/framework/","title":"框架","keywords":"","body":"框架 "},"articles/python/framework/web/":{"url":"articles/python/framework/web/","title":"Web","keywords":"","body":"web "},"articles/python/framework/web/django.html":{"url":"articles/python/framework/web/django.html","title":"django","keywords":"","body":""},"articles/python/business/":{"url":"articles/python/business/","title":"业务","keywords":"","body":"业务 "},"articles/python/business/graceful_stop.html":{"url":"articles/python/business/graceful_stop.html","title":"优雅退出","keywords":"","body":"优雅退出 import sys import signal def on_exit(signo, frame): print(\"退出系统\") sys.exit(0) if __name__ == \"__main__\": # 主进程退出信号监听 \"\"\" windows 下支持的信号是有限的： SIGINT ctrl+C 终端 SIGTERM kill 发出的软件终止 \"\"\" signal.signal(signal.SIGINT, on_exit) signal.signal(signal.SIGTERM, on_exit) "},"articles/go/alg/":{"url":"articles/go/alg/","title":"算法","keywords":"","body":"算法 "},"articles/go/alg/sort/":{"url":"articles/go/alg/sort/","title":"排序算法","keywords":"","body":"排序 "},"articles/go/alg/sort/bubble.html":{"url":"articles/go/alg/sort/bubble.html","title":"冒泡排序","keywords":"","body":"冒泡排序 func bubbleSort(arr *[5]int) { for i := 0; i (*arr)[j+1] { temp = (*arr)[j] (*arr)[j] = (*arr)[j+1] (*arr)[j+1] = temp } } } } "},"articles/go/business/":{"url":"articles/go/business/","title":"业务","keywords":"","body":"业务 "},"articles/go/business/graceful_stop.html":{"url":"articles/go/business/graceful_stop.html","title":"优雅退出","keywords":"","body":"优雅退出 package main import ( \"fmt\" \"os\" \"os/signal\" \"syscall\" ) func main() { // gin web server // 如果接收到 kill 信号 quit := make(chan os.Signal) signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM) "},"articles/others/data_format/":{"url":"articles/others/data_format/","title":"数据传输格式","keywords":"","body":"数据传输格式 "},"articles/others/data_format/protobuf.html":{"url":"articles/others/data_format/protobuf.html","title":"protobuf","keywords":"","body":"protobuf syntax "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Term Definition for this term Another term With it's definition, this can contain bold text and all other kinds of inline markup ... "},"articles/go/module/":{"url":"articles/go/module/","title":"模块","keywords":"","body":"模块 "},"articles/go/module/log/":{"url":"articles/go/module/log/","title":"日志","keywords":"","body":"日志 "},"articles/go/module/log/zap.html":{"url":"articles/go/module/log/zap.html","title":"zap","keywords":"","body":"zap 安装 go get go.uber.org/zap 使用 快速使用 package main import ( \"time\" \"go.uber.org/zap\" ) func main() { logger := zap.NewExample() defer logger.Sync() url := \"http://example.org/api\" logger.Info(\"failed to fetch URL\", zap.String(\"url\", url), zap.Int(\"attempt\", 3), zap.Duration(\"backoff\", time.Second), ) sugar := logger.Sugar() sugar.Infow(\"failed to fetch URL\", \"url\", url, \"attempt\", 3, \"backoff\", time.Second, ) sugar.Infof(\"Failed to fetch URL: %s\", url) } 输出到文件 package main import ( \"time\" \"go.uber.org/zap\" ) func NewLogger() (*zap.Logger, error) { cfg := zap.NewProductionConfig() cfg.OutputPaths = []string{ \"./myproject.log\", } return cfg.Build() } func main() { logger, err := NewLogger() if err != nil { panic(err) } sugar := logger.Sugar() defer sugar.Sync() url := \"http://example.org/api\" sugar.Info(\"failed to fetch URL\", zap.String(\"url\", url), zap.Int(\"attempt\", 3), zap.Duration(\"backoff\", time.Second), ) } 全局变量 package main import ( \"go.uber.org/zap\" ) func main() { logger, _ := NewDevelopment() zap.ReplaceGlobals(logger) zap.S().Debug(\"Hello\") } "},"articles/go/module/config_file/":{"url":"articles/go/module/config_file/","title":"配置文件","keywords":"","body":"读取配置文件 "},"articles/go/module/config_file/ini.html":{"url":"articles/go/module/config_file/ini.html","title":"ini","keywords":"","body":"ini config.ini [app] DefaultPage = 1 DefaultPageSize = 10 [db] Host = 127.0.0.1 Port = 3306 User = root Password = 123456 package config import ( \"fmt\" \"time\" \"github.com/go-ini/ini\" ) type App struct { DefaultPage string DefaultPageSize string } var AppSetting = &App{} type Database struct { Host string Port string User string Password string Url string } var DatabaseSetting = &Database{} var cfg *ini.File func init() { var err error cfg, err = ini.Load(\"config.ini\") if err != nil { fmt.Printf(\"Fail to read file: %v\", err) } mapTo(\"app\", AppSetting) mapTo(\"db\", DatabaseSetting) DatabaseSetting.Url = fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True&loc=Local\", DatabaseSetting.User, DatabaseSetting.Password, DatabaseSetting.Host, DatabaseSetting.Port, DatabaseSetting.Name, ) } func mapTo(section string, v interface{}) { err := cfg.Section(section).MapTo(v) if err != nil { panic(err) } } "},"articles/go/module/config_file/viper.html":{"url":"articles/go/module/config_file/viper.html","title":"viper","keywords":"","body":"viper 快速启用 config.yaml name: 'user-web' mysql: host: '127.0.0.1' port: 3306 package main import ( \"fmt\" \"github.com/spf13/viper\" ) type MysqlConfig struct { Host string `mapstructure:\"host\"` Port int `mapstructure:\"port\"` } type ServerConfig struct { ServiceName string `mapstructure:\"name\"` MysqlInfo MysqlConfig `mapstructure:\"mysql\"` } func main() { v := viper.New() v.SetConfigFile(\"config.yaml\") if err := v.ReadInConfig(); err != nil { panic(err) } serverConfig := ServerConfig{} if err := v.Unmarshal(&serverConfig); err != nil { panic(err) } fmt.Println(serverConfig) fmt.Printf(\"%V\", v.Get(\"name\")) } 开发/生产环境隔离 开发环境和生产环境通过 环境变量 来区分。 config-pro.yaml name: 'user-web' mysql: host: '6.6.6.6' port: 3306 config-debug.yaml name: 'user-web' mysql: host: '127.0.0.1' port: 3306 package main import ( \"fmt\" \"github.com/spf13/viper\" ) type MysqlConfig struct { Host string `mapstructure:\"host\"` Port int `mapstructure:\"port\"` } type ServerConfig struct { ServiceName string `mapstructure:\"name\"` MysqlInfo MysqlConfig `mapstructure:\"mysql\"` } func GetEnvInfo(env string) bool { viper.AutomaticEnv() return viper.GetBool(env) } func main() { debug := GetEnvInfo(\"DEBUG_ENV\") configFilePrefix := \"config\" configFileName := fmt.Sprintf(\"%s-pro.yaml\", configFilePrefix) if debug { configFileName = fmt.Sprintf(\"%s-debug.yaml\", configFilePrefix) } v := viper.New() v.SetConfigFile(configFileName) if err := v.ReadInConfig(); err != nil { panic(err) } serverConfig := ServerConfig{} if err := v.Unmarshal(&serverConfig); err != nil { panic(err) } fmt.Println(serverConfig) fmt.Printf(\"%V\", v.Get(\"name\")) } 动态监控变化 package main import ( \"fmt\" \"github.com/fsnotify/fsnotify\" \"github.com/spf13/viper\" ) type MysqlConfig struct { Host string `mapstructure:\"host\"` Port int `mapstructure:\"port\"` } type ServerConfig struct { ServiceName string `mapstructure:\"name\"` MysqlInfo MysqlConfig `mapstructure:\"mysql\"` } func main() { v := viper.New() v.SetConfigFile(\"config.yaml\") if err := v.ReadInConfig(); err != nil { panic(err) } serverConfig := ServerConfig{} if err := v.Unmarshal(&serverConfig); err != nil { panic(err) } fmt.Println(serverConfig) fmt.Printf(\"%V\", v.Get(\"name\")) // viper -- 动态监控变化 v.WatchConfig() v.OnConfigChange(func(e fsnotify.Event) { fmt.Println(\"config file changed: \", e.Name) _ = v.ReadInConfig() _ = v.Unmarshal(&serverConfig) fmt.Println(serverConfig) }) } "}}